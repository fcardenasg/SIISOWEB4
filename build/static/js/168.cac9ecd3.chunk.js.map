{"version":3,"sources":["modules/Company/Company.jsx","formatdata/CompanyForm.js","components/input/InputText.jsx","components/alert/AlertAll.jsx","../../src/validateFieldsNatively.ts","../../src/toNestError.ts","../../src/yup.ts","api/clients/CompanyClient.js"],"names":["validationSchema","yup","shape","Codigo","required","ValidationMessage","Requerido","DescripcionSpa","Email","Celular","Gerente","Company","user","useAuth","theme","useTheme","navigate","useNavigate","matchesXS","useMediaQuery","breakpoints","down","useState","openSuccess","setOpenSuccess","openError","setOpenError","errorMessage","setErrorMessage","methods","useForm","resolver","yupResolver","handleSubmit","errors","reset","handleClick","datos","a","codigo","descripcionSpa","email","celular","gerente","usuarioRegistro","fechaRegistro","FormatDate","Date","usuarioModifico","fechaModifico","DataToInsert","Object","keys","length","InsertCompany","status","MainCard","title","open","onClose","error","Grid","container","spacing","item","xs","md","lg","InputText","defaultValue","fullWidth","name","label","size","bug","sx","pb","AnimateButton","Button","variant","onClick","TitleButton","Guardar","Cancelar","others","render","field","InputLabelProps","className","ParamDelete","Message","TituloEliminar","text","TextoEliminar","icon","buttons","dangerMode","confirm","cancel","ParamCloseCase","TituloCerrarCaso","TextoCerrarCaso","ParamLoadingData","TituloCargar","TextoCargar","SlideTransition","props","direction","Alert","React","forwardRef","ref","elevation","MessageSuccess","TransitionComponent","anchorOrigin","vertical","horizontal","autoHideDuration","severity","width","MessageUpdate","Actualizar","MessageDelete","Eliminar","MessageError","setCustomValidity","fieldPath","get","message","reportValidity","validateFieldsNatively","options","fields","refs","forEach","toNestError","shouldUseNativeValidation","fieldErrors","path","set","assign","schema","schemaOptions","resolverOptions","values","context","mode","abortEarly","result","e","inner","validateAllFieldCriteria","criteriaMode","reduce","previous","type","types","messages","appendErrors","concat","GetAllCompany","page","pageSize","getData","Url","Empresa","empresa","postData","UpdateCompanys","putData","DeleteCompany","idEmpresa","deleteData"],"mappings":"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","file":"static/js/168.cac9ecd3.chunk.js","sourcesContent":["import { useTheme } from '@mui/material/styles';\r\nimport {\r\n    Button,\r\n    Grid,\r\n    useMediaQuery\r\n} from '@mui/material';\r\nimport { useState } from 'react';\r\n\r\nimport { useNavigate } from 'react-router-dom';\r\nimport * as yup from 'yup';\r\nimport { FormProvider, useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\nimport { MessageSuccess, MessageError } from 'components/alert/AlertAll';\r\nimport useAuth from 'hooks/useAuth';\r\nimport { InsertCompany } from 'api/clients/CompanyClient';\r\nimport InputText from 'components/input/InputText';\r\nimport { TitleButton, ValidationMessage } from 'components/helpers/Enums';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { PostCompany } from 'formatdata/CompanyForm';\r\nimport { FormatDate } from 'components/helpers/Format';\r\n\r\nconst validationSchema = yup.object().shape({\r\n    Codigo: yup.string().required(`${ValidationMessage.Requerido}`),\r\n    DescripcionSpa: yup.string().required(`${ValidationMessage.Requerido}`),\r\n    Email: yup.string().required(`${ValidationMessage.Requerido}`),\r\n    Celular: yup.string().required(`${ValidationMessage.Requerido}`),\r\n    Gerente: yup.string().required(`${ValidationMessage.Requerido}`)\r\n});\r\n\r\nconst Company = () => {\r\n    const { user } = useAuth();\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n    const matchesXS = useMediaQuery(theme.breakpoints.down('md'));\r\n\r\n    const [openSuccess, setOpenSuccess] = useState(false);\r\n    const [openError, setOpenError] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    const methods = useForm({\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n    const { handleSubmit, errors, reset } = methods;\r\n\r\n    const handleClick = async (datos) => {\r\n        try {\r\n            const DataToInsert = PostCompany(datos.Codigo, datos.DescripcionSpa, datos.Email, datos.Celular, datos.Gerente,\r\n                user.email, FormatDate(new Date()), '', FormatDate(new Date()));\r\n\r\n            if (Object.keys(datos.length !== 0)) {\r\n                const result = await InsertCompany(DataToInsert);\r\n                if (result.status === 200) {\r\n                    setOpenSuccess(true);\r\n                    reset();\r\n                }\r\n            }\r\n        } catch (error) {\r\n            setOpenError(true);\r\n            setErrorMessage('Este código ya existe');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <MainCard title=\"Registrar Empresas\">\r\n            <MessageSuccess open={openSuccess} onClose={() => setOpenSuccess(false)} />\r\n            <MessageError error={errorMessage} open={openError} onClose={() => setOpenError(false)} />\r\n\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={12} md={6} lg={4}>\r\n                    <FormProvider {...methods}>\r\n                        <InputText\r\n                            defaultValue=\"\"\r\n                            fullWidth\r\n                            name=\"Codigo\"\r\n                            label=\"Código\"\r\n                            size={matchesXS ? 'small' : 'medium'}\r\n                            bug={errors}\r\n                        />\r\n                    </FormProvider>\r\n                </Grid>\r\n                <Grid item xs={12} md={6} lg={4}>\r\n                    <FormProvider {...methods}>\r\n                        <InputText\r\n                            defaultValue=\"\"\r\n                            fullWidth\r\n                            name=\"DescripcionSpa\"\r\n                            label=\"Nombre\"\r\n                            size={matchesXS ? 'small' : 'medium'}\r\n                            bug={errors}\r\n                        />\r\n                    </FormProvider>\r\n                </Grid>\r\n                <Grid item xs={12} md={6} lg={4}>\r\n                    <FormProvider {...methods}>\r\n                        <InputText\r\n                            defaultValue=\"\"\r\n                            fullWidth\r\n                            name=\"Email\"\r\n                            label=\"Email\"\r\n                            size={matchesXS ? 'small' : 'medium'}\r\n                            bug={errors}\r\n                        />\r\n                    </FormProvider>\r\n                </Grid>\r\n                <Grid item xs={12} md={6} lg={4}>\r\n                    <FormProvider {...methods}>\r\n                        <InputText\r\n                            defaultValue=\"\"\r\n                            fullWidth\r\n                            name=\"Celular\"\r\n                            label=\"Celular\"\r\n                            size={matchesXS ? 'small' : 'medium'}\r\n                            bug={errors}\r\n                        />\r\n                    </FormProvider>\r\n                </Grid>\r\n                <Grid item xs={12} md={6} lg={4} sx={{ pb: 2 }}>\r\n                    <FormProvider {...methods}>\r\n                        <InputText\r\n                            defaultValue=\"\"\r\n                            fullWidth\r\n                            name=\"Gerente\"\r\n                            label=\"Gerente\"\r\n                            size={matchesXS ? 'small' : 'medium'}\r\n                            bug={errors}\r\n                        />\r\n                    </FormProvider>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                            <AnimateButton>\r\n                                <Button variant=\"contained\" fullWidth onClick={handleSubmit(handleClick)}>\r\n                                    {TitleButton.Guardar}\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <AnimateButton>\r\n                                <Button variant=\"outlined\" fullWidth onClick={() => navigate(\"/company/list\")}>\r\n                                    {TitleButton.Cancelar}\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default Company;","export function PostCompany(codigo, descripcionSpa, email, celular, gerente, usuarioRegistro, fechaRegistro, usuarioModifico, fechaModifico) {\r\n    return { codigo, descripcionSpa, email, celular, gerente, usuarioRegistro, fechaRegistro, usuarioModifico, fechaModifico };\r\n}\r\n\r\nexport function PutCompany(codigo, descripcionSpa, email, celular, gerente, usuarioRegistro, fechaRegistro, usuarioModifico, fechaModifico) {\r\n    return { codigo, descripcionSpa, email, celular, gerente, usuarioRegistro, fechaRegistro, usuarioModifico, fechaModifico };\r\n}","import PropTypes from 'prop-types';\r\nimport { Controller } from 'react-hook-form';\r\nimport {\r\n    FormHelperText,\r\n    Grid,\r\n    TextField,\r\n} from '@mui/material';\r\n\r\nconst InputText = ({ bug, defaultValue, label, size, fullWidth = true, name, required, ...others }) => {\r\n\r\n    return (\r\n        <>\r\n            <Controller\r\n                name={name}\r\n                defaultValue={defaultValue}\r\n                render={({ field }) => (\r\n                    <TextField\r\n                        {...field}\r\n                        label={label}\r\n                        size={size}\r\n                        InputLabelProps={{\r\n                            className: required ? 'required-label' : '',\r\n                            required: required || false\r\n                        }}\r\n                        error={bug ? true : false}\r\n                        fullWidth\r\n                        {...others}\r\n                    />\r\n                )}\r\n            />\r\n            {bug && (\r\n                <Grid item xs={12}>\r\n                    <FormHelperText error>{bug}</FormHelperText>\r\n                </Grid>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default InputText;\r\n\r\nInputText.propTypes = {\r\n    bug: PropTypes.object,\r\n    size: PropTypes.string,\r\n    label: PropTypes.string,\r\n    defaultValue: PropTypes.any,\r\n    name: PropTypes.string,\r\n    required: PropTypes.bool,\r\n    fullWidth: PropTypes.bool\r\n};","import React from 'react';\r\nimport Slide from '@mui/material/Slide';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport { Message } from 'components/helpers/Enums';\r\nimport { Snackbar } from '@mui/material';\r\n\r\nexport const ParamDelete = {\r\n    title: `${Message.TituloEliminar}`,\r\n    text: `${Message.TextoEliminar}`,\r\n    icon: \"error\",\r\n    buttons: [\"Cancelar\", \"Si\"],\r\n    dangerMode: true,\r\n    confirm: {\r\n        text: \"Si\",\r\n    },\r\n    cancel: {\r\n        text: \"Cancelar\",\r\n    },\r\n}\r\n\r\nexport const ParamCloseCase = {\r\n    title: `${Message.TituloCerrarCaso}`,\r\n    text: `${Message.TextoCerrarCaso}`,\r\n    icon: \"warning\",\r\n    buttons: [\"Cancelar\", \"Si\"],\r\n    dangerMode: true,\r\n    confirm: {\r\n        text: \"Si\",\r\n    },\r\n    cancel: {\r\n        text: \"Cancelar\",\r\n    },\r\n}\r\n\r\nexport const ParamLoadingData = {\r\n    title: `${Message.TituloCargar}`,\r\n    text: `${Message.TextoCargar}`,\r\n    icon: \"warning\",\r\n    buttons: [\"Cancelar\", \"Si\"],\r\n    dangerMode: true,\r\n    confirm: {\r\n        text: \"Si\",\r\n    },\r\n    cancel: {\r\n        text: \"Cancelar\",\r\n    },\r\n}\r\n\r\nfunction SlideTransition(props) {\r\n    return <Slide {...props} direction=\"up\" />;\r\n}\r\n\r\nconst Alert = React.forwardRef(\r\n    function Alert(props, ref) {\r\n        return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n    }\r\n);\r\n\r\nexport const MessageSuccess = ({ open, onClose }) => {\r\n    return (\r\n        <Snackbar\r\n            TransitionComponent={SlideTransition}\r\n            key={'alert'}\r\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right', }}\r\n            open={open}\r\n            autoHideDuration={2500}\r\n            onClose={onClose}\r\n        >\r\n            <Alert severity=\"success\" sx={{ width: '100%' }}>\r\n                {Message.Guardar}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\nexport const MessageUpdate = ({ open, onClose }) => {\r\n    return (\r\n        <Snackbar\r\n            TransitionComponent={SlideTransition}\r\n            key={'alert'}\r\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right', }}\r\n            open={open}\r\n            autoHideDuration={2500}\r\n            onClose={onClose}\r\n        >\r\n            <Alert severity=\"success\" sx={{ width: '100%' }}>\r\n                {Message.Actualizar}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\nexport const MessageDelete = ({ open, onClose }) => {\r\n    return (\r\n        <Snackbar\r\n            TransitionComponent={SlideTransition}\r\n            key={'alert'}\r\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right', }}\r\n            open={open}\r\n            autoHideDuration={2500}\r\n            onClose={onClose}\r\n        >\r\n            <Alert severity=\"error\" sx={{ width: '100%' }}>\r\n                {Message.Eliminar}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\nexport const MessageError = ({ open, onClose, error }) => {\r\n    return (\r\n        <Snackbar\r\n            TransitionComponent={SlideTransition}\r\n            key={'alert'}\r\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right', }}\r\n            open={open}\r\n            autoHideDuration={2000}\r\n            onClose={onClose}\r\n        >\r\n            <Alert severity=\"error\" sx={{ width: '100%' }}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","import {\n  get, FieldError, ResolverOptions, Ref\n} from 'react-hook-form';\n\nconst setCustomValidity = (ref: Ref, fieldPath: string, errors: Record<string, FieldError>) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues>(\n  errors: Record<string, FieldError>,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n\n\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors)\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) => setCustomValidity(ref, fieldPath, errors))\n    }\n  }\n};\n","import {\n  set,\n  get,\n  FieldError,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues>(\n  errors: Record<string, FieldError>,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n","import Yup from 'yup';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport { appendErrors, FieldError } from 'react-hook-form';\nimport { Resolver } from './types';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport const yupResolver: Resolver =\n  (schema, schemaOptions = {}, resolverOptions = {}) =>\n  async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n","import { Url } from '../instances/AuthRoute';\r\nimport { getData, deleteData, postData, putData } from '../UtilInstance';\r\n\r\nexport const GetAllCompany = async (page, pageSize) => await getData(Url.Empresa, { page, pageSize });\r\nexport const GetByIdCompany = async (id) => await getData(Url.EmpresaId, { id });\r\nexport const InsertCompany = async (empresa) => await postData(Url.Empresa, empresa);\r\nexport const UpdateCompanys = async (empresa) => await putData(Url.Empresa, empresa);\r\nexport const DeleteCompany = async (idEmpresa) => await deleteData(Url.Empresa, { idEmpresa });"],"sourceRoot":""}