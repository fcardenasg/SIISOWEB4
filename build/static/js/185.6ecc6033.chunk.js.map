{"version":3,"sources":["components/report/ReportAlcoholAndDrugTesting.jsx","api/clients/MedicalFormulaClient.js"],"names":["StyledTableCell","styled","TableCell","theme","tableCellClasses","head","backgroundColor","palette","primary","main","color","common","white","body","fontSize","ReportMedicalFormula","navigate","useNavigate","componentRef","useRef","useState","lsMedicalFormula","setLsMedicaFormula","useEffect","a","GetAllMedicalFormula","lsServer","status","data","entities","console","log","GetAll","container","alignItems","justifyContent","spacing","gridSpacing","item","xs","md","lg","ref","darkTitle","title","variant","secondary","sx","borderBottom","pl","pr","align","map","row","index","idRecetario","documento","nameEmpleado","medico","ViewFormat","fecha","pt","pb","trigger","content","current","onClick","page","pageSize","getData","Url","Recetario","GetByIdMedicalFormula","id","RecetarioId","InsertMedicalFormula","recetario","postData","UpdateMedicalFormulas","putData","DeleteMedicalFormula","deleteData"],"mappings":"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","file":"static/js/185.6ecc6033.chunk.js","sourcesContent":["import { useRef, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport { styled } from '@mui/material/styles';\r\nimport { tableCellClasses } from '@mui/material/TableCell';\r\n\r\nimport { Button, Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@mui/material';\r\n\r\nimport ReactToPrint from 'react-to-print';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport SubCard from 'ui-component/cards/SubCard';\r\nimport Logo from 'ui-component/Logo';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { ViewFormat } from 'components/helpers/Format';\r\nimport { GetAllMedicalFormula } from 'api/clients/MedicalFormulaClient';\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.common.white,\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 12,\r\n    },\r\n}));\r\n\r\nconst ReportMedicalFormula = () => {\r\n    const navigate = useNavigate();\r\n    const componentRef = useRef(null);\r\n    const [lsMedicalFormula, setLsMedicaFormula] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function GetAll() {\r\n            try {\r\n                const lsServer = await GetAllMedicalFormula(0, 0);\r\n                if (lsServer.status === 200) setLsMedicaFormula(lsServer.data.entities);\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n        GetAll();\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <Grid container alignItems=\"center\" justifyContent=\"center\" spacing={gridSpacing}>\r\n            <Grid item xs={12} md={6} lg={12} ref={componentRef}>\r\n                <SubCard darkTitle title={\r\n                    <>\r\n                        <Typography variant=\"subtitle1\">DRUMMOND LTD</Typography>\r\n                        <Typography variant=\"subtitle1\">DEPARTAMENTO DE SALUD E HIGIENE OCUPACIONAL</Typography>\r\n                        <Typography variant=\"subtitle1\">LISTADO DE RECETARIO</Typography>\r\n                    </>\r\n                } secondary={<Logo />}>\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={12}>\r\n                            <TableContainer>\r\n                                <Table\r\n                                    sx={{\r\n                                        '& tr:last-child td': {\r\n                                            borderBottom: 'none'\r\n                                        },\r\n                                        '& thead tr th': {\r\n                                            borderBottom: 'none'\r\n                                        },\r\n                                        '& th:first-child, & td:first-child': {\r\n                                            pl: { xs: 1, md: 5 }\r\n                                        },\r\n                                        '& th:last-child, & td:last-child': {\r\n                                            pr: { xs: 1, md: 5 }\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <StyledTableCell align=\"left\">ID</StyledTableCell>\r\n                                            <StyledTableCell align=\"left\">DOCUMENTO</StyledTableCell>\r\n                                            <StyledTableCell align=\"left\">NOMBRE</StyledTableCell>\r\n                                            <StyledTableCell align=\"left\">MÃ‰DICO</StyledTableCell>\r\n                                            <StyledTableCell align=\"left\">FECHA</StyledTableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {lsMedicalFormula.map((row, index) => (\r\n                                            <TableRow key={index}>\r\n                                                <TableCell align=\"left\">{row.idRecetario}</TableCell>\r\n                                                <TableCell align=\"left\">{row.documento}</TableCell>\r\n                                                <TableCell align=\"left\">{row.nameEmpleado}</TableCell>\r\n                                                <TableCell align=\"left\">{row.medico}</TableCell>\r\n                                                <TableCell align=\"left\">{ViewFormat(row.fecha)}</TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Grid>\r\n                    </Grid>\r\n                </SubCard>\r\n            </Grid>\r\n\r\n            <Grid item>\r\n                <Grid container sx={{ pt: 0.5, pb: 0.5 }} spacing={4} alignItems=\"center\" justifyContent=\"center\">\r\n                    <Grid xs={6} item>\r\n                        <AnimateButton>\r\n                            <ReactToPrint trigger={() => <Button variant=\"contained\">Imprimir</Button>} content={() => componentRef.current} />\r\n                        </AnimateButton>\r\n                    </Grid>\r\n                    <Grid xs={6} item>\r\n                        <AnimateButton>\r\n                            <Button variant=\"contained\" onClick={() => navigate('/medicalformula/list')}>\r\n                                Cerrar\r\n                            </Button>\r\n                        </AnimateButton>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default ReportMedicalFormula;","import { Url } from '../instances/AuthRoute';\r\nimport { getData, deleteData, postData, putData } from '../UtilInstance';\r\n\r\nexport const GetAllMedicalFormula = async (page, pageSize) => await getData(Url.Recetario, { page, pageSize });\r\nexport const GetByIdMedicalFormula = async (id) => await getData(Url.RecetarioId, { id });\r\nexport const InsertMedicalFormula = async (recetario) => await postData(Url.Recetario, recetario);\r\nexport const UpdateMedicalFormulas = async (recetario) => await putData(Url.Recetario, recetario);\r\nexport const DeleteMedicalFormula = async (idRecetario) => await deleteData(Url.Recetario, { idRecetario });"],"sourceRoot":""}